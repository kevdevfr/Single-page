<?php/** * Class handling the parameters * *//** * Requires some functions * */require_once "functions.php";class Config{	/**	 * The parameters' XML	 *	 * @var SimpleXMLfield	 *	 */	private $xml;	/**	 * XML's filepath	 *	 * @var String	 *	 */	private $path;	/**	 * Fields for the admin form	 *	 * @var Array	 *	 */	private $fields = Array(		Array( 'text', 'Prefix', 'The powerful'),		Array( 'text', 'Name', 'Zorg'),		Array( 'text', 'Suffix', 'Industries'),		Array( 'text', 'Address 1', '111 Eighth Avenue'),		Array( 'text', 'Address 2', 'New York, U.S.A.'),		Array( 'text', 'Address URL', 'https://www.google.fr/maps/@0,0,50z'),		Array( 'text', 'Phone Number', '+12 3 45 67 89'),		Array( 'text', 'E-mail', 'jbez@zorg-industries.com'),		Array( 'text', 'Subtitle', '"Another Zorg invention"'),		Array( 'textarea', 'Message', 'We are open.'),		Array( 'text', 'Font Color', '#fcfcfc'),		Array( 'text', 'Alternative Color', '#8BC6CA'),		Array( 'text', 'Background Color', '#212121'),		Array( 'file', 'Favicon', '.ico'),		Array( 'file', 'Logo'),		Array( 'file', 'Background'),		Array( 'text', 'Background Alpha', '1.0'),		Array( 'text', 'Facebook', ''),		Array( 'text', 'Twitter', ''),		Array( 'text', 'VK', ''),		Array( 'text', 'Instagram', ''),		Array( 'text', 'Pinterest', ''),		Array( 'text', 'LinkedIn', ''),		Array( 'text', 'GitHub', ''),		Array( 'text', 'Behance', ''),		Array( 'text', 'Vimeo', ''),		Array( 'text', 'Youtube', ''),		Array( 'text', 'Copyright', '2263 Zorg Industries'),		Array( 'text', 'Language Code', 'en-US'),		Array( 'text', 'Meta-Title'),		Array( 'text', 'Meta-Description'),		Array( 'text', 'Analytics', 'UA-8765432-1'),		Array( 'textarea', 'Custom CSS', 'body { ... }')	);  /**   * Checks if XML file exists, then sets the XML var	 *   */	public function __construct()	{		$this -> path = dirname( dirname( __FILE__ ) ).'/xml/config.xml';		if( file_exists( $this -> path ) )		{			$context  = stream_context_create( Array( 'http' => Array( 'header' => 'Accept: application/xml' ) ) );			$xml = file_get_contents( $this -> path, false, $context );			if ( substr_count( $xml, '<' ) < 2 )				$this -> xml = new SimpleXMLElement( '<config></config>' );			else				$this -> xml = simplexml_load_string( $xml );		} else			$this -> xml = new SimpleXMLElement( '<config></config>' );		foreach( $this -> fields as $field )			if( !property_exists( $this -> xml -> children(), classify( $field[1] ) ) )				$this -> xml -> addChild( classify( $field[1] ) );	}  /**   * Handles the files uploaded with the admin form and updates the XML var using its results   *   * @param array $post POST vars from the admin form   *   */	public function update( $post )	{		foreach( $this -> fields as $field )			if( $field[0] == 'file' && !empty( $post[classify( $field[1] )] ) )				if( file_exists( "../ups/tmp/" . idfy( $post[classify( $field[1] )] ) ) )					copy( "../ups/tmp/" . idfy( $post[classify( $field[1] )] ), "../ups/" . idfy( $post[classify( $field[1] )] ) );		$files = glob( '../ups/tmp/*' );		foreach( $files as $file )			if( is_file( $file ) )				unlink( $file );		$array = json_decode( json_encode( $this->xml ), TRUE );		foreach( $this -> fields as $field )			if( isset( $post[classify( $field[1] )] ) ) {				if( $field[0] == 'file' && !empty( $post[classify( $field[1] )] ) )					$array[classify( $field[1] )] = idfy( $post[classify( $field[1] )] );				else					$array[classify( $field[1] )] = $post[classify( $field[1] )];			}			else				$array[classify( $field[1] )] = '';		/* JSON to XML */		$return = '<config>';		foreach( $array as $key => $item )			$return .= "<{$key}>" . str_replace( "&", "&amp;", $item) . "</{$key}>";		$return .= '</config>';		$this -> xml = simplexml_load_string( $return );	}  /**   * Builds the admin form using the fields var   *   * @return string admin from HTML	 *   */	public function adminHtml()	{		$html = '<form name="nav" action="' . $_SERVER['PHP_SELF'] . '" method="POST"><input name="edit" type="hidden" value="1" />';		$array = json_decode( json_encode( $this -> xml ), TRUE );		foreach( $this -> fields as $field )		{			$html .= '<span class="field">';			if( $field[0] != "file" )				$html .= '<label>' . $field[1] . '</label>';			else				if( empty( $field[2] ) )					$html .= '<label class="full">' . $field[1] . ' <small>(max: ' . formatBytes( file_upload_max_size(), 5 ) . ')</small></label>';				else					$html .= '<label class="full">' . $field[1] . ' <small>' . $field[2] . ' (max: ' . formatBytes( file_upload_max_size(), 5) . ')</small></label>';			switch( $field[0] )			{				case 'file':					if( !empty( $array[classify( $field[1] )] ) )					{						$html .= '<input type="hidden" name="' . classify( $field[1] ) . '" value="' . $array[classify( $field[1] )].'" />';						$html .= '<span class="thumb"><button>X</button><img src="../ups/' . $array[classify( $field[1] )].'" /></span>';					} else {						$html .= '<input type="file" class="' . classify( $field[1] ) . '" name="' . classify( $field[1] ) . '"/>';						$html .= '<span class="thumb"></span>';					}					$html .= '<span class="error">Error</span>';				break;				case 'textarea':					$html .= '<textarea name="' . classify( $field[1] ) . '"';					if( !empty( $field[2] ) )						$html .= ' placeholder="' . $field[2] . '"';					$html .= '>';					if( !empty( $array[classify( $field[1] )] ) )						$html.= htmlentities( $array[classify( $field[1] )] );					$html .= '</textarea>';				break;				case 'text':				case 'password':				default:					$html .= '<input type="' . $field[0] . '" name="' . classify( $field[1] ) . '"';					if( !empty( $field[2] ) )						$html .= '" placeholder="' . htmlentities( $field[2] ) . '"';					$html .= ' value="';					if( !empty( $array[classify( $field[1] )] ) )						$html .= htmlentities ( $array[classify( $field[1] )] );					$html .= '" />';				break;			}			$html .= "</span>";		}		$html .= '<p><input type="submit" value="Save parameters" /></p>';		$html .= '</form>';		return $html;	}  /**   * Builds the page   *   * @return string the page	 *   */	public function comingSoon()	{		$html = '<div class="comingsoon">'."\n\t\t\t\t";		if( $this -> get( 'Logo' ) )		{			$html .= '<h1 class="logo">' . "\n\t\t\t\t\t" . '<img src="./ups/' . $this -> get( 'Logo' ) . '" alt="';			if( $this -> get( 'Prefix' ) )				$html .= $this -> get( 'Prefix' ) . ' ';			$html .= $this -> get( 'Name' );			if( $this -> get( 'Suffix') )				$html .= ' ' . $this -> get( 'Suffix' );			$html .= '"/>' . "\n\t\t\t\t\t";			$html .= '<span>';			if( $this -> get( 'Prefix' ) )				$html .= $this -> get( 'Prefix' ) . ' ';			$html .= $this -> get( 'Name' );			if( $this -> get( 'Suffix') )				$html .= ' ' . $this -> get( 'Suffix' );			$html .= '</span>' . "\n\t\t\t\t";			$html .= '</h1>' . "\n\t\t\t\t";		} else {			$html .= '<h1';			if( $this -> get( 'Alternative Color' ) )				$html .= ' style="color:' . $this -> get( 'Alternative Color' ) . '"';			$html .= '>' . "\n\t\t\t\t\t";			if( $this -> get( 'Prefix') )				$html .= '<small>' . $this -> get( 'Prefix') . '</small>' . "\n\t\t\t\t\t";			$html .= '<span>' . $this -> get( 'Name' ) . '</span>' . "\n\t\t\t\t\t";			if( $this -> get( 'Suffix') )				$html .= '<small>' . $this -> get( 'Suffix' ) . '</small>' . "\n\t\t\t\t";			$html .= '</h1>' . "\n\t\t\t\t";		}		if( $this -> get( 'Address 1' ) )		{			$html .= '<p>' . "\n\t\t\t\t\t";			if( $this -> get( 'Address URL' ) )			{				$html .= '<a href="' . $this -> get( 'Address URL' ) . '"><i class="icon-location"></i>';				$html .= $this -> get( 'Address 1' ) . ' ' . $this -> get( 'Address 2' );				$html .= '</a>';			} else {				$html .= $this -> get( 'Address 1' ).' '.$this -> get( 'Address 2' );			}			$html .=  "\n\t\t\t\t" . '</p>' . "\n\t\t\t\t";		}		if( $this -> get( 'Phone Number' ) )			$html .= '<p>' . "\n\t\t\t\t\t" . '<a href="tel:' . preg_replace( '/[^+0-9]+/i', '', $this -> get( 'Phone Number' ) ) . '"><i class="icon-phone"></i>' . $this -> get( 'Phone Number' ) . '</a>' . "\n\t\t\t\t" . '</p>' . "\n\t\t\t\t";		if( $this -> get( 'E-mail' ) )			$html .= '<p>' . "\n\t\t\t\t\t" . '<a href="mailto:' . $this -> get( 'E-mail') . '"><i class="icon-mail-alt"></i>' . $this -> get( 'E-mail' ) . '</a>' . "\n\t\t\t\t" . '</p>' . "\n\t\t\t\t";		if( $this -> get( 'Subtitle' ) )		{			$html .= '<p class="baseline"';			if( $this -> get( 'Alternative Color' ) )				$html .= 'style="color:' . $this -> get( 'Alternative Color' ) . '"';			$html .= '>' . "\n\t\t\t\t\t" . $this -> get( 'Subtitle' ) . "\n\t\t\t\t" . '</p>' . "\n\t\t\t\t";		}
		if( $this -> get( 'Message' ) )			$html .= '<p>' . "\n\t\t\t\t\t" . $this -> get( 'Message' ) . "\n\t\t\t\t" . '</p>' . "\n\t\t\t\t";		$html .= '<p class="social">' . "\n\t\t\t\t";		if( $this -> get( 'facebook' ) )			$html .= "\t" . '<a href="' . $this -> get( 'facebook' ) . '"><i class="icon-facebook"></i></a>' .  "\n\t\t\t\t";		if( $this -> get( 'twitter'))			$html .= "\t" . '<a href="' . $this -> get( 'twitter' ) . '"><i class="icon-twitter"></i></a>' .  "\n\t\t\t\t";		if( $this -> get( 'vk' ) )			$html .= "\t" . '<a href="' . $this -> get( 'vk' ).'"><i class="icon-vkontakte"></i></a>' .  "\n\t\t\t\t";		if( $this -> get( 'instagram' ) )			$html .= "\t" . '<a href="' . $this -> get( 'instagram') . '"><i class="icon-instagram"></i></a>' .  "\n\t\t\t\t";		if( $this -> get( 'pinterest' ) )			$html .= "\t" . '<a href="' . $this -> get( 'pinterest' ) . '"><i class="icon-pinterest"></i></a>' .  "\n\t\t\t\t";		if( $this -> get( 'linkedin' ) )			$html .= "\t" . '<a href="' . $this -> get( 'linkedin' ) . '"><i class="icon-linkedin"></i></a>' .  "\n\t\t\t\t";		if( $this -> get( 'github'))			$html .= "\t" . '<a href="' . $this -> get( 'github' ) . '"><i class="icon-github"></i></a>' .  "\n\t\t\t\t";		if( $this -> get( 'behance'))			$html .= "\t" . '<a href="' . $this -> get( 'behance' ) . '"><i class="icon-behance"></i></a>' .  "\n\t\t\t\t";		if( $this -> get( 'vimeo'))			$html .= "\t" . '<a href="' . $this -> get( 'vimeo' ) . '"><i class="icon-vimeo"></i></a>' .  "\n\t\t\t\t";		if( $this -> get( 'youtube'))			$html .= "\t" . '<a href="' . $this -> get( 'youtube' ) . '"><i class="icon-youtube-play"></i></a>' .  "\n\t\t\t\t";		$html .= '</p>' . "\n\t\t\t";		if( $this -> get( 'Copyright' ) )			$html .= "\t" . '<p>' . "\n\t\t\t\t\t" . 'Copyright &copy; ' . $this -> get( 'Copyright' ) . "\n\t\t\t\t" . '</p>' . "\n\t\t\t";		$html .= '</div>' . "\n";		if( $this -> get( 'Analytics' ) )			$html .= "\t\t\t" . '<script>' . "\n" .'				(function(i,s,o,g,r,a,m){i[\'GoogleAnalyticsObject\']=r;i[r]=i[r]||function(){' . "\n" .'				(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),' . "\n" .'				m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)' . "\n" .'				})(window,document,\'script\',\'https://www.google-analytics.com/analytics.js\',\'ga\');' . "\n" .'				' . "\n" .'				ga(\'create\', \'' . $this -> get( 'Analytics') . '\', \'auto\');' . "\n" .'				ga(\'send\', \'pageview\');' . "\n" .'			</script>' . "\n";		return $html;	}  /**   * Saves the XML file   *   */	public function save()	{		$dom = new DOMDocument( '1.0', 'utf-8' );		$dom->preserveWhiteSpace = false;		$dom->formatOutput = true;		$dom->loadXML( $this -> xml -> asXML() );		$dom->save( $this -> path );	}  /**   * Getter for the fields   *   * @param string $param field's name	 *   * @return string field's value	 *   */	public function get ( $param )	{		$array = json_decode( json_encode( $this->xml ), TRUE );		if( isset( $array[classify( $param )] ) && !empty( $array[classify($param)] ) ) return $array[classify( $param )]; else return false;	}}